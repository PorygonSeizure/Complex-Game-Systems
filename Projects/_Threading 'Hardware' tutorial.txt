- Create class in project that inherits from BaseApplication
- In this new class' update() function, use the timer.h class (from the Z: drive) 
to time a call to FakeHardware::GetSomeResult(), which returns a float and simulates
having a GPU or other hardware that takes a while to give back a result.

If you make this call on the main thread, your update loop will take too long. 
Figure out a way (using threads) to get the result without blocking/stalling
the main thread (the FakeHardware will 'sleep' when used, to simulate waiting for
a GPU to response. When a thread is 'blocked', it's unusable and waiting on something
else) and making your application slow.

EXAMPLE:

bool ThreadingApplication::update(float deltaTime)
{
	Timer myTimer;
	myTimer.Start();

	////////////////////////
	////////////////////////
		
	// m_hardware is a FakeHardware object - look at FakeHardware.h on the Z: drive
	float myResult = m_hardware->GetSomeResult();
	
	// The above is just naively calling GetSomeResult() on the main thread 
	// and will take too long.
	
	////////////////////////
	////////////////////////

	myTimer.End();
	if (myTimer.GetTimeDiff() > 0.5f)
	{
		std::cout << "Too slow! Frame took " << myTimer.GetTimeDiff() << " seconds." << std::endl;
	}

	std::cout << "Result: " << myResult << std::endl;
	return true;
}